import streamlit as st
import pandas as pd
import plotly.express as px

# ConfiguraciÃ³n de la pÃ¡gina
st.set_page_config(page_title="Dashboard Contable y Presupuestario", layout="wide")
st.title("ðŸ“Š Dashboard Contable y Presupuestario - GAF")

# Subida de archivo Excel
uploaded_file = st.file_uploader("Sube tu archivo Excel", type=["xlsx"], help="Debe contener hojas: CONTABILIDAD y PRESUPUESTOS")

if uploaded_file:
    try:
        # Cargar hojas
        df_contabilidad = pd.read_excel(uploaded_file, sheet_name="CONTABILIDAD")
        df_presupuesto = pd.read_excel(uploaded_file, sheet_name="PRESUPUESTOS")

        tab1, tab2 = st.tabs(["ðŸ“Š CONTABILIDAD", "ðŸ“ˆ PRESUPUESTOS"])

        # ----------- TAB CONTABILIDAD -----------
        with tab1:
            st.header("ðŸ“Š AnÃ¡lisis Contable")

            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                meses_ctb = st.multiselect("Mes", df_contabilidad["Mes"].unique(), default=df_contabilidad["Mes"].unique())
            with col2:
                estados = st.multiselect("Estado Financiero", df_contabilidad["Estado Financiero"].unique())

            # Filtrado base
            dfc = df_contabilidad.copy()
            if meses_ctb:
                dfc = dfc[dfc["Mes"].isin(meses_ctb)]
            if estados:
                dfc = dfc[dfc["Estado Financiero"].isin(estados)]

            # Aplicar cuentas segÃºn estado financiero
            cuentas_balance = ["ACTIVO", "PASIVO", "PATRIMONIO"]
            cuentas_resultado = ["INGRESOS", "EGRESOS"]
            dfc["Cuenta"] = dfc["Cuenta"].str.upper()

            df_balance = dfc[dfc["Estado Financiero"] == "Balance General"]
            df_balance = df_balance[df_balance["Cuenta"].isin(cuentas_balance)]

            df_resultado = dfc[dfc["Estado Financiero"] == "Estado de Resultados"]
            df_resultado = df_resultado[df_resultado["Cuenta"].isin(cuentas_resultado)]

            # Calcular RESULTADO
            resultado_df = df_resultado.pivot_table(index="Mes", columns="Cuenta", values="Importe Bs", aggfunc="sum", fill_value=0).reset_index()
            resultado_df["RESULTADO"] = resultado_df["INGRESOS"] - resultado_df["EGRESOS"]

            # KPIs contables
            st.subheader("ðŸ”¢ KPIs Contables")
            total_activo = df_balance[df_balance["Cuenta"] == "ACTIVO"]["Importe Bs"].sum()
            total_pasivo = df_balance[df_balance["Cuenta"] == "PASIVO"]["Importe Bs"].sum()
            total_patrimonio = df_balance[df_balance["Cuenta"] == "PATRIMONIO"]["Importe Bs"].sum()
            total_ingresos = df_resultado[df_resultado["Cuenta"] == "INGRESOS"]["Importe Bs"].sum()
            total_egresos = df_resultado[df_resultado["Cuenta"] == "EGRESOS"]["Importe Bs"].sum()
            utilidad = total_ingresos - total_egresos

            col1, col2, col3 = st.columns(3)
            col1.metric("ðŸ’° Total Activo (Bs)", f"{total_activo:,.2f}")
            col2.metric("ðŸ’° Total Pasivo (Bs)", f"{total_pasivo:,.2f}")
            col3.metric("ðŸ’° Total Patrimonio (Bs)", f"{total_patrimonio:,.2f}")

            col4, col5, col6 = st.columns(3)
            col4.metric("ðŸ“ˆ Ingresos (Bs)", f"{total_ingresos:,.2f}")
            col5.metric("ðŸ“‰ Egresos (Bs)", f"{total_egresos:,.2f}")
            col6.metric("ðŸ“Š Utilidad (Bs)", f"{utilidad:,.2f}")

            # GrÃ¡fico comparativo mensual por cuenta
            st.subheader("ðŸ“Š Comparativo Mensual por Cuenta")
            df_graf = pd.concat([df_balance, df_resultado])
            df_grouped = df_graf.groupby(["Mes", "Cuenta"])["Importe Bs"].sum().reset_index()
            resultado_df_melted = resultado_df[["Mes", "RESULTADO"]].copy()
            resultado_df_melted["Cuenta"] = "RESULTADO"
            resultado_df_melted.rename(columns={"RESULTADO": "Importe Bs"}, inplace=True)

            df_plot = pd.concat([df_grouped, resultado_df_melted], ignore_index=True)

            fig1 = px.bar(
                df_plot,
                x="Mes",
                y="Importe Bs",
                color="Cuenta",
                barmode="group",
                text_auto=True
            )
            st.plotly_chart(fig1, use_container_width=True)

            # GrÃ¡fico de evoluciÃ³n mensual
            st.subheader("ðŸ“ˆ EvoluciÃ³n Mensual")
            fig2 = px.line(
                df_plot,
                x="Mes",
                y="Importe Bs",
                color="Cuenta",
                markers=True
            )
            st.plotly_chart(fig2, use_container_width=True)

            with st.expander("ðŸ“„ Ver datos contables filtrados"):
                st.dataframe(dfc)

        # ----------- TAB PRESUPUESTOS -----------
        with tab2:
            st.header("ðŸ“ˆ AnÃ¡lisis Presupuestario")

            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                meses = st.multiselect("Mes", df_presupuesto["Mes"].unique(), default=df_presupuesto["Mes"].unique())
            with col2:
                gastos = st.multiselect("Tipo de Gasto", df_presupuesto["Tipo de Gasto"].unique())
            with col3:
                sedes = st.multiselect("Sede", df_presupuesto["Sede"].unique())

            dfp = df_presupuesto.copy()
            if meses:
                dfp = dfp[dfp["Mes"].isin(meses)]
            if gastos:
                dfp = dfp[dfp["Tipo de Gasto"].isin(gastos)]
            if sedes:
                dfp = dfp[dfp["Sede"].isin(sedes)]

            # KPIs presupuestarios
            st.subheader("ðŸ”¢ KPIs Presupuestarios")
            presupuesto_total = dfp["Valor Presupuesto 2025"].sum()
            real_total = dfp["Valor Real 2025"].sum()
            col1, col2 = st.columns(2)
            col1.metric("ðŸŽ¯ Total Presupuesto 2025 (Bs)", f"{presupuesto_total:,.2f}")
            col2.metric("âœ… Total Real 2025 (Bs)", f"{real_total:,.2f}")

            # Comparativo por cuenta
            st.subheader("ðŸ“Š Comparativo Presupuesto vs Real por Cuenta")
            fig3 = px.bar(
                dfp,
                x="Cuenta",
                y=["Valor Presupuesto 2025", "Valor Real 2025"],
                barmode="group",
                text_auto=True
            )
            st.plotly_chart(fig3, use_container_width=True)

            # EvoluciÃ³n mensual
            st.subheader("ðŸ“ˆ EvoluciÃ³n Mensual")
            dfp_grouped = dfp.groupby("Mes")[["Valor Presupuesto 2025", "Valor Real 2025"]].sum().reset_index()
            fig4 = px.line(
                dfp_grouped,
                x="Mes",
                y=["Valor Presupuesto 2025", "Valor Real 2025"],
                markers=True
            )
            st.plotly_chart(fig4, use_container_width=True)

            with st.expander("ðŸ“„ Ver datos presupuestarios filtrados"):
                st.dataframe(dfp)

    except Exception as e:
        st.error(f"Error al procesar el archivo: {e}")
else:
    st.info("Por favor, sube un archivo Excel que contenga las hojas 'CONTABILIDAD' y 'PRESUPUESTOS'.")

import streamlit as st
import pandas as pd
import plotly.express as px
from fpdf import FPDF
import tempfile
import plotly.io as pio

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Dashboard Contable y Presupuestario", layout="wide")
st.title("üìä Dashboard Contable y Presupuestario - GAF")

# Subida de archivo Excel
uploaded_file = st.file_uploader("Sube tu archivo Excel", type=["xlsx"], help="Debe contener hojas: CONTABILIDAD y PRESUPUESTOS")

if uploaded_file:
    try:
        # Cargar hojas
        df_contabilidad = pd.read_excel(uploaded_file, sheet_name="CONTABILIDAD")
        df_presupuesto = pd.read_excel(uploaded_file, sheet_name="PRESUPUESTOS")

        tab1, tab2 = st.tabs(["üìä CONTABILIDAD", "üìà PRESUPUESTOS"])

        # ----------- TAB CONTABILIDAD ----------- 
        with tab1:
            st.header("üìä An√°lisis Contable")

            # Filtro por mes
            meses_ctb = st.multiselect("Mes", df_contabilidad["Mes"].unique(), default=df_contabilidad["Mes"].unique())

            # Filtro por cuenta
            cuentas_unicas = df_contabilidad["Cuenta"].unique()
            cuentas_ctb = st.multiselect("Cuenta", cuentas_unicas, default=cuentas_unicas)

            # Filtrado de datos
            dfc = df_contabilidad[df_contabilidad["Mes"].isin(meses_ctb)]
            dfc = dfc[dfc["Cuenta"].isin(cuentas_ctb)]

            # KPIs contables
            df_kpi = df_contabilidad[df_contabilidad["Mes"].isin(meses_ctb)]
            total_activo = df_kpi[df_kpi["Cuenta"] == "ACTIVO"]["Importe Bs"].sum()
            total_pasivo = df_kpi[df_kpi["Cuenta"] == "PASIVO"]["Importe Bs"].sum()
            total_patrimonio = df_kpi[df_kpi["Cuenta"] == "PATRIMONIO"]["Importe Bs"].sum()
            total_ingresos = df_kpi[df_kpi["Cuenta"] == "INGRESOS"]["Importe Bs"].sum()
            total_egresos = df_kpi[df_kpi["Cuenta"] == "EGRESOS"]["Importe Bs"].sum()
            utilidad = total_ingresos - total_egresos

            st.subheader("üî¢ KPIs Contables y Resultados")
            col1, col2, col3 = st.columns(3)
            col1.metric("üí∞ Total Activo (Bs)", f"{total_activo:,.2f}")
            col2.metric("üí∞ Total Pasivo (Bs)", f"{total_pasivo:,.2f}")
            col3.metric("üí∞ Total Patrimonio (Bs)", f"{total_patrimonio:,.2f}")

            col4, col5, col6 = st.columns(3)
            col4.metric("üíµ Total Ingresos (Bs)", f"{total_ingresos:,.2f}")
            col5.metric("üí∏ Total Egresos (Bs)", f"{total_egresos:,.2f}")
            col6.metric("üìà Utilidad (Bs)", f"{utilidad:,.2f}")

            # Gr√°fico de barras comparando cuentas por mes
            st.subheader("üìä Monto por Cuenta y Mes")
            fig1 = px.bar(
                dfc,
                x="Mes",
                y="Importe Bs",
                color="Cuenta",
                barmode="group",
                text="Cuenta"
            )
            fig1.update_traces(textposition="outside")
            st.plotly_chart(fig1, use_container_width=True)

            # Gr√°fico de evoluci√≥n mensual por cuenta
            st.subheader("üìà Evoluci√≥n Mensual por Cuenta")
            dfc_grouped = dfc.groupby(["Mes", "Cuenta"])["Importe Bs"].sum().reset_index()
            fig2 = px.line(
                dfc_grouped,
                x="Mes",
                y="Importe Bs",
                color="Cuenta",
                markers=True
            )
            st.plotly_chart(fig2, use_container_width=True)

            # Gr√°fico de utilidad mensual
            st.subheader("üìâ Utilidad Mensual")
            df_utilidad = df_kpi[df_kpi["Cuenta"].isin(["INGRESOS", "EGRESOS"])]
            df_utilidad_grouped = df_utilidad.groupby(["Mes", "Cuenta"])["Importe Bs"].sum().unstack(fill_value=0).reset_index()
            df_utilidad_grouped["UTILIDAD"] = df_utilidad_grouped["INGRESOS"] - df_utilidad_grouped["EGRESOS"]

            fig_utilidad = px.line(
                df_utilidad_grouped,
                x="Mes",
                y="UTILIDAD",
                markers=True,
                labels={"UTILIDAD": "Utilidad (Bs)"}
            )
            st.plotly_chart(fig_utilidad, use_container_width=True)

            with st.expander("üìÑ Ver datos contables filtrados"):
                st.dataframe(dfc)

        # ----------- TAB PRESUPUESTOS ----------- 
        with tab2:
            st.header("üìà An√°lisis Presupuestario")

            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                meses = st.multiselect("Mes", df_presupuesto["Mes"].unique(), default=df_presupuesto["Mes"].unique())
            with col2:
                gastos = st.multiselect("Tipo", df_presupuesto["Tipo"].unique())
            with col3:
                centros = st.multiselect("Centro de Responsabilidad", df_presupuesto["Grcia/Centro Resp"].unique())

            dfp = df_presupuesto.copy()
            if meses:
                dfp = dfp[dfp["Mes"].isin(meses)]
            if gastos:
                dfp = dfp[dfp["Tipo"].isin(gastos)]
            if centros:
                dfp = dfp[dfp["Grcia/Centro Resp"].isin(centros)]

            # KPIs
            st.subheader("üî¢ KPIs Presupuestarios")
            presupuesto_total = dfp["Valor Presupuesto 2025"].sum()
            ejecucion_total = dfp["Ejecucion 2025"].sum()
            col1, col2 = st.columns(2)
            col1.metric("üéØ Total Presupuesto 2025 (Bs)", f"{presupuesto_total:,.2f}")
            col2.metric("‚úÖ Total Ejecuci√≥n 2025 (Bs)", f"{ejecucion_total:,.2f}")

            # Comparativo Presupuesto vs Ejecuci√≥n por Partida
            st.subheader("üìä Comparativo Presupuesto vs Ejecuci√≥n por Partida")
            fig3 = px.bar(
                dfp,
                x="Partida",
                y=["Valor Presupuesto 2025", "Ejecucion 2025"],
                barmode="group"  # ‚úÖ Sin text_auto
            )
            st.plotly_chart(fig3, use_container_width=True)

            # Evoluci√≥n mensual de presupuesto y ejecuci√≥n
            st.subheader("üìà Evoluci√≥n Mensual")
            dfp_grouped = dfp.groupby("Mes")[["Valor Presupuesto 2025", "Ejecucion 2025"]].sum().reset_index()
            fig4 = px.line(
                dfp_grouped,
                x="Mes",
                y=["Valor Presupuesto 2025", "Ejecucion 2025"],
                markers=True
            )
            st.plotly_chart(fig4, use_container_width=True)

            with st.expander("üìÑ Ver datos presupuestarios filtrados"):
                st.dataframe(dfp)

        # ----------- EXPORTAR A PDF ----------- 
        if st.button("Exportar a PDF y EXCEL"):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="Dashboard Contable y Presupuestario", ln=True, align="C")

            # Agregar KPIs contables
            pdf.cell(200, 10, txt=f"Total Activo (Bs): {total_activo:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Total Pasivo (Bs): {total_pasivo:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Total Patrimonio (Bs): {total_patrimonio:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Total Ingresos (Bs): {total_ingresos:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Total Egresos (Bs): {total_egresos:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Utilidad (Bs): {utilidad:,.2f}", ln=True)

            # Funci√≥n para agregar imagen con control de espacio
            def add_image_to_pdf(pdf, image_path):
                pdf.image(image_path, x=10, y=pdf.get_y(), w=180)
                pdf.ln(85)
                if pdf.get_y() > 250:  # Si el contenido est√° muy cerca del final de la p√°gina
                    pdf.add_page()  # A√±adir una nueva p√°gina

            # Exportar todos los gr√°ficos como im√°genes
            fig1_path = "figura1.png"
            fig1.write_image(fig1_path)  # Aseg√∫rate de tener kaleido instalado
            add_image_to_pdf(pdf, fig1_path)

            fig2_path = "figura2.png"
            fig2.write_image(fig2_path)
            add_image_to_pdf(pdf, fig2_path)

            fig_utilidad_path = "figura_utilidad.png"
            fig_utilidad.write_image(fig_utilidad_path)
            add_image_to_pdf(pdf, fig_utilidad_path)

            fig3_path = "figura3.png"
            fig3.write_image(fig3_path)
            add_image_to_pdf(pdf, fig3_path)

            fig4_path = "figura4.png"
            fig4.write_image(fig4_path)
            add_image_to_pdf(pdf, fig4_path)

            # Guardar archivo PDF en un archivo temporal
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file_path = tmp_file.name
                pdf.output(tmp_file_path)

            with open(tmp_file_path, "rb") as f:
                st.download_button(label="Descargar PDF", data=f, file_name="dashboard.pdf", mime="application/pdf")
                
            # Exportar archivo Excel
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_excel:
                excel_file_path = tmp_excel.name
                with pd.ExcelWriter(excel_file_path, engine='xlsxwriter') as writer:
                    df_contabilidad.to_excel(writer, sheet_name="CONTABILIDAD")
                    df_presupuesto.to_excel(writer, sheet_name="PRESUPUESTOS")
                st.download_button(label="Descargar Excel", data=open(excel_file_path, "rb"), file_name="dashboard.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    except Exception as e:
        st.error(f"Error al procesar el archivo: {e}")
else:
    st.info("Por favor, sube un archivo Excel que contenga las hojas 'CONTABILIDAD' y 'PRESUPUESTOS'.")

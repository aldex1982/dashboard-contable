import streamlit as st
import pandas as pd
import plotly.express as px

# ConfiguraciÃ³n de la pÃ¡gina
st.set_page_config(page_title="Dashboard Contable y Presupuestario", layout="wide")
st.title("ðŸ“Š Dashboard Contable y Presupuestario - GAF")

# Subida de archivo Excel
uploaded_file = st.file_uploader("Sube tu archivo Excel", type=["xlsx"], help="Debe contener hojas: CONTABILIDAD y PRESUPUESTOS")

if uploaded_file:
    try:
        # Cargar hojas
        df_contabilidad = pd.read_excel(uploaded_file, sheet_name="CONTABILIDAD")
        df_presupuesto = pd.read_excel(uploaded_file, sheet_name="PRESUPUESTOS")

        tab1, tab2 = st.tabs(["ðŸ“Š CONTABILIDAD", "ðŸ“ˆ PRESUPUESTOS"])

        # ----------- TAB CONTABILIDAD ----------- 
        with tab1:
            st.header("ðŸ“Š AnÃ¡lisis Contable")

            # Filtros generales para contabilidad
            col1, col2, col3 = st.columns(3)
            with col1:
                meses_ctb = st.multiselect("Mes", df_contabilidad["Mes"].unique(), default=df_contabilidad["Mes"].unique())
            with col2:
                estados = st.multiselect("Estado Financiero", df_contabilidad["Estado Financiero"].unique())
            with col3:
                tipos = st.multiselect("Tipo cuenta", df_contabilidad["Tipo cuenta"].unique())

            dfc = df_contabilidad.copy()
            if meses_ctb:
                dfc = dfc[dfc["Mes"].isin(meses_ctb)]
            if estados:
                dfc = dfc[dfc["Estado Financiero"].isin(estados)]
            if tipos:
                dfc = dfc[dfc["Tipo cuenta"].isin(tipos)]

            # KPIs contables
            st.subheader("ðŸ”¢ KPIs Contables")
            total_activo = dfc[dfc["Tipo cuenta"] == "ACTIVO"]["Importe Bs"].sum()
            total_pasivo = dfc[dfc["Tipo cuenta"] == "PASIVO"]["Importe Bs"].sum()
            total_patrimonio = dfc[dfc["Tipo cuenta"] == "PATRIMONIO"]["Importe Bs"].sum()

            col1, col2, col3 = st.columns(3)
            col1.metric("ðŸ’° Total Activo (Bs)", f"{total_activo:,.2f}")
            col2.metric("ðŸ’° Total Pasivo (Bs)", f"{total_pasivo:,.2f}")
            col3.metric("ðŸ’° Total Patrimonio (Bs)", f"{total_patrimonio:,.2f}")

            # GrÃ¡fico de barras por tipo de cuenta
            st.subheader("ðŸ“Š Monto por Tipo de Cuenta")
            fig1 = px.bar(
                dfc,
                x="Tipo cuenta",
                y="Importe Bs",
                color="Subtipo cuenta",
                barmode="group",
                text="Mes"
            )
            fig1.update_traces(textposition="outside")
            st.plotly_chart(fig1, use_container_width=True)

            # Filtros especÃ­ficos para indicadores financieros
            st.subheader("ðŸ“Š Indicadores Financieros por Mes")
            col1, col2 = st.columns(2)
            with col1:
                tipos_razon = st.multiselect("Tipo de razÃ³n financiera", dfc["Tipo Razon Financiera"].dropna().unique())
            with col2:
                meses_razon = st.multiselect("Mes", dfc["Mes"].unique())

            df_razon = dfc.copy()
            if tipos_razon:
                df_razon = df_razon[df_razon["Tipo Razon Financiera"].isin(tipos_razon)]
            if meses_razon:
                df_razon = df_razon[df_razon["Mes"].isin(meses_razon)]

            if not df_razon.empty:
                fig2 = px.bar(
                    df_razon,
                    x="Mes",
                    y="Valor medicion",
                    color="Tipo Razon Financiera",
                    barmode="group",
                    text="Valor medicion"
                )
                fig2.update_traces(textposition="outside")
                st.plotly_chart(fig2, use_container_width=True)
            else:
                st.warning("No hay datos para los filtros seleccionados.")

            with st.expander("ðŸ“„ Ver datos contables filtrados"):
                st.dataframe(dfc)

        # ----------- TAB PRESUPUESTOS ----------- 
        with tab2:
            st.header("ðŸ“ˆ AnÃ¡lisis Presupuestario")

            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                meses = st.multiselect("Mes", df_presupuesto["Mes"].unique(), default=df_presupuesto["Mes"].unique())
            with col2:
                gastos = st.multiselect("Tipo de Gasto", df_presupuesto["Tipo de Gasto"].unique())
            with col3:
                sedes = st.multiselect("Sede", df_presupuesto["Sede"].unique())

            dfp = df_presupuesto.copy()
            if meses:
                dfp = dfp[dfp["Mes"].isin(meses)]
            if gastos:
                dfp = dfp[dfp["Tipo de Gasto"].isin(gastos)]
            if sedes:
                dfp = dfp[dfp["Sede"].isin(sedes)]

            # KPIs
            st.subheader("ðŸ”¢ KPIs Presupuestarios")
            meta_total = dfp["Valor Meta 2024"].sum()
            real_total = dfp["Valor Real 2024"].sum()
            col1, col2 = st.columns(2)
            col1.metric("ðŸŽ¯ Total Meta 2024 (Bs)", f"{meta_total:,.2f}")
            col2.metric("âœ… Total Real 2024 (Bs)", f"{real_total:,.2f}")

            # Comparativo Meta vs Real
            st.subheader("ðŸ“Š Comparativo Meta vs Real por Cuenta")
            fig3 = px.bar(
                dfp,
                x="Cuenta",
                y=["Valor Meta 2024", "Valor Real 2024"],
                barmode="group",
                text_auto=True
            )
            st.plotly_chart(fig3, use_container_width=True)

            # EvoluciÃ³n mensual
            st.subheader("ðŸ“ˆ EvoluciÃ³n Mensual")
            dfp_grouped = dfp.groupby("Mes")[["Valor Meta 2024", "Valor Real 2024"]].sum().reset_index()

            fig4 = px.line(
                dfp_grouped,
                x="Mes",
                y=["Valor Meta 2024", "Valor Real 2024"],
                markers=True
            )

            fig4.update_traces(
                text=dfp_grouped["Valor Meta 2024"].apply(lambda x: f"{x:,.2f}"),
                textposition="top center",
                textfont_color="white",
                selector=dict(name="Valor Meta 2024")
            )
            fig4.update_traces(
                text=dfp_grouped["Valor Real 2024"].apply(lambda x: f"{x:,.2f}"),
                textposition="top center",
                textfont_color="white",
                selector=dict(name="Valor Real 2024")
            )

            st.plotly_chart(fig4, use_container_width=True)

            with st.expander("ðŸ“„ Ver datos presupuestarios filtrados"):
                st.dataframe(dfp)

    except Exception as e:
        st.error(f"Error al procesar el archivo: {e}")
else:
    st.info("Por favor, sube un archivo Excel que contenga las hojas 'CONTABILIDAD' y 'PRESUPUESTOS'.")